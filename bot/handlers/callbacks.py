from contextlib import suppress
from uuid import uuid4
from random import randint

from aiogram import types, Router
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest


from cbdata import ClickCallbackFactory
from keyboards.kb_newgame import make_newgame_keyboard, make_replay_keyboard
from tictactoe.game import get_game_start_settings, ai_move, make_text_table, check_to_win, there_free_cells


router = Router()
HUM = 0
AI = 1


@router.callback_query(text="help")
async def callback_help(call: types.CallbackQuery):
    text = f"–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã: \n–ü–æ–±–µ–∂–¥–∞–µ—Ç –∏–≥—Ä–æ–∫, –ø–æ—Å—Ç—Ä–æ–∏–≤—à–∏–π –ª–∏–Ω–∏—é –∏–∑ 3 —Ñ–∏–≥—É—Ä –≤ —Ä—è–¥" \
           f"(–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ, –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ –∏–ª–∏ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏)."
    await call.message.answer(text=text)
    await call.answer()


@router.callback_query(text="new_game")
async def callback_newgame(call: types.CallbackQuery, state: FSMContext):
    hum_figure, ai_figure, crosses, game_id, cells = get_game_start_settings()

    if crosses == AI:
        ai_move(cells, ai_figure, hum_figure)

    newgame_dict = {"game_id": game_id, "crosses": crosses, "hum_figure": hum_figure, "ai_figure": ai_figure, "cells": cells}
    await state.set_data(newgame_dict)

    text = f"–•–æ–¥: {call.message.chat.first_name} {hum_figure} \n\n–•–æ–¥: –ò–ò {ai_figure}\n"
    kb = make_newgame_keyboard(game_id, cells)
    await call.message.answer(text=text, reply_markup=kb)
    await call.answer()


@router.callback_query(ClickCallbackFactory.filter(), flags={"need_check_game": True})
async def callback_motion(call: types.CallbackQuery, state: FSMContext,
                               callback_data: ClickCallbackFactory):
    """
    Called when the player has pressed the button of the playing field
    """
    fsm_data = await state.get_data()
    game_id = fsm_data.get("game_id")
    cells = fsm_data.get("cells", {})
    crosses = fsm_data.get("crosses")
    hum_figure = fsm_data.get("hum_figure")
    ai_figure = fsm_data.get("ai_figure")

    x: int = callback_data.number

    # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–∞ –ª–∏ –∫–ª–µ—Ç–∫–∞
    if cells[x] == " ":
        cells[x] = hum_figure
    else:
        await call.answer()
        return

    # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –≤—ã–π–≥—Ä—ã—à —á–µ–ª–æ–≤–µ–∫–∞
    if check_to_win(cells, hum_figure):
        with suppress(TelegramBadRequest):
            await call.message.edit_text(
                f"{call.message.chat.first_name} {hum_figure} \n–ò–ò {ai_figure}"
                f"\n\n{make_text_table(cells)}\n\n<b>–í—ã –≤—ã–π–≥—Ä–∞–ª–∏!</b> üéâ",
                reply_markup=make_replay_keyboard()
            )
            await call.answer()
            return

    # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–ª–µ—Ç–∫–∏
    if not there_free_cells(cells):
        # –Ω–∏—á—å—è
        with suppress(TelegramBadRequest):
            await call.message.edit_text(
                f"{call.message.chat.first_name} {hum_figure} \n–ò–ò {ai_figure}"
                f"\n\n{make_text_table(cells)}\n\n<b>–ù–∏—á—å—è</b>",
                reply_markup=make_replay_keyboard()
            )
            await call.answer()
            return

    # —Å—Ö–æ–¥–∏—Ç—å –ò–ò –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–ª–µ—Ç–∫–∏
    if there_free_cells(cells):
        ai_move(cells, ai_figure, hum_figure)

        # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –≤—ã–π–≥—Ä—ã—à –ò–ò
        if check_to_win(cells, ai_figure):
            with suppress(TelegramBadRequest):
                await call.message.edit_text(
                    f"{call.message.chat.first_name} {hum_figure} \n–ò–ò {ai_figure}"
                    f"\n\n{make_text_table(cells)}\n\n<b>–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!</b> üòû",
                    reply_markup=make_replay_keyboard()
                )
                await call.answer()
                return

        # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–ª–µ—Ç–∫–∏
        if not there_free_cells(cells):
            # –Ω–∏—á—å—è
            with suppress(TelegramBadRequest):
                await call.message.edit_text(
                    f"{call.message.chat.first_name} {hum_figure} \n–ò–ò {ai_figure}"
                    f"\n\n{make_text_table(cells)}\n\n<b>–ù–∏—á—å—è</b>",
                    reply_markup=make_replay_keyboard()
                )
                await call.answer()
                return

        # –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –æ–∫–æ–Ω—á–µ–Ω–∞ –ø–æ—Å–ª–µ —Ö–æ–¥–∞ –∏–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        await state.update_data(cells=cells)
        with suppress(TelegramBadRequest):
            await call.message.edit_reply_markup(
                make_newgame_keyboard(game_id, cells)
            )
        await call.answer()

    await call.answer(cache_time=2)
